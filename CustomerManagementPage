import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.*;
import java.util.Arrays;
import java.util.LinkedList;

public class CustomerManagementPage extends JFrame 
{
    private CompleteStacks center;  // Reference to the CompleteStacks.
    private JTable table;
    private DefaultTableModel tableModel;
    private JTextArea lane1TextArea, lane2TextArea, lane3TextArea;  // Lanes display

    public CustomerManagementPage(CompleteStacks center) 
    {
        this.center = center;

        setTitle("Customer Management");
        setSize(1200, 800);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Define table for customer information
        String[] columnNames = {"Customer ID", "Customer Name", "Vehicle Plate", "Service Types", "Service Cost"};
        tableModel = new DefaultTableModel(columnNames, 0);
        table = new JTable(tableModel);

        JScrollPane tableScrollPane = new JScrollPane(table);

        // TextAreas for Lanes
        lane1TextArea = new JTextArea();
        lane2TextArea = new JTextArea();
        lane3TextArea = new JTextArea();

        lane1TextArea.setEditable(false);
        lane2TextArea.setEditable(false);
        lane3TextArea.setEditable(false);

        JScrollPane lane1ScrollPane = new JScrollPane(lane1TextArea);
        JScrollPane lane2ScrollPane = new JScrollPane(lane2TextArea);
        JScrollPane lane3ScrollPane = new JScrollPane(lane3TextArea);

        JPanel lanesPanel = new JPanel(new GridLayout(1, 3));
        lanesPanel.add(createLanePanel("Lane 1", lane1ScrollPane));
        lanesPanel.add(createLanePanel("Lane 2", lane2ScrollPane));
        lanesPanel.add(createLanePanel("Lane 3", lane3ScrollPane));

        // SplitPane to divide customer table and lanes
        JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, tableScrollPane, lanesPanel);
        splitPane.setDividerLocation(300); // Set initial position of the divider
        splitPane.setResizeWeight(0.3); // Allocate more space to the lanes section

        // Buttons
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton addButton = new JButton("Add Customer");
        JButton editButton = new JButton("Edit Customer");
        JButton deleteButton = new JButton("Delete Customer");
        JButton processPaymentButton = new JButton("Process Payment");
        JButton backButton = new JButton("Back to Menu");

        addButton.addActionListener(e -> openCustomerDialog(null, -1));
        editButton.addActionListener(e -> 
        {
            int selectedRow = table.getSelectedRow();
            if (selectedRow >= 0) {
                openCustomerDialog(center.getCustomerById((String) tableModel.getValueAt(selectedRow, 0)), selectedRow);
            } else {
                JOptionPane.showMessageDialog(this, "Please select a customer to edit.");
            }
        });
        deleteButton.addActionListener(e -> deleteCustomer(table.getSelectedRow()));
        processPaymentButton.addActionListener(e -> processPayment(table.getSelectedRow()));
        backButton.addActionListener(e -> 
        {
            new MenuPage(center);
            dispose();
        });

        buttonPanel.add(addButton);
        buttonPanel.add(editButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(processPaymentButton);
        buttonPanel.add(backButton);

        // Add components to the frame
        add(splitPane, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);

        loadCustomerData(); // Load data from txt file
        distributeCustomersToLanes(); // Populate lanes

        setVisible(true);
    }

    private JPanel createLanePanel(String title, JScrollPane scrollPane) 
    {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createTitledBorder(title));
        panel.add(new JLabel("Queue Contents:"), BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        return panel;
    }

    private void loadCustomerData() 
    {
        File file = new File("customers.txt"); // Ensure the file name matches

        if (!file.exists()) 
        {
            JOptionPane.showMessageDialog(this, "File 'customers.txt' not found. Please add the file in the correct directory.", 
                                          "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (BufferedReader br = new BufferedReader(new FileReader(file))) 
        {
            String line;
            while ((line = br.readLine()) != null) 
            {
                String[] parts = line.split(", "); // Split the line into parts

                if (parts.length >= 4) 
                { // Ensure the line has the required number of parts
                    String customerId = parts[0].trim();
                    String customerName = parts[1].trim();
                    String vehiclePlate = parts[2].trim();
                    String[] serviceArray = Arrays.copyOfRange(parts, 3, parts.length - 1); // Extract services
                    String services = String.join(", ", serviceArray); // Combine services into a single string
                    double serviceCost = Double.parseDouble(parts[parts.length - 1].trim());

                    // Add customer to the table
                    Object[] rowData = {customerId, customerName, vehiclePlate, services, String.format("RM %.2f", serviceCost)};
                    tableModel.addRow(rowData);

                    // Add customer to the ServiceCenter
                    CustomerInfo customer = new CustomerInfo(customerId, customerName, vehiclePlate);
                    for (String service : serviceArray) 
                    {
                        customer.addService(new CustomerInfo.ServiceInfo("DefaultServiceId", service, serviceCost / serviceArray.length, null, null));
                    }
                    center.addCustomer(customer);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading the file: " + e.getMessage(), 
                                          "File Read Error", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error parsing service cost: " + e.getMessage(), 
                                          "Data Parsing Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void distributeCustomersToLanes() 
    {
        lane1TextArea.setText("");
        lane2TextArea.setText("");
        lane3TextArea.setText("");

        LinkedList<CustomerInfo> customers = center.getCustomerList();
        for (CustomerInfo customer : customers) 
        {
            int serviceCount = customer.getServices().size();

            String customerDetails = String.format(
                    "Customer ID: %s\nCustomer Name: %s\nVehicle Plate: %s\nService Count: %d\n\n",
                    customer.getCustomerId(), customer.getCustomerName(), customer.getVehiclePlateNumber(), serviceCount);

            if (serviceCount == 3) {
                lane3TextArea.append(customerDetails);
            } else if (serviceCount == 1 || (serviceCount % 2 != 0 && serviceCount != 3)) {
                lane1TextArea.append(customerDetails);
            } else if (serviceCount == 2 || serviceCount % 2 == 0) {
                lane2TextArea.append(customerDetails);
            }
        }
    }

private void openCustomerDialog(CustomerInfo customer, int rowIndex) 
{
    JTextField idField = new JTextField(customer != null ? customer.getCustomerId() : "", 10);
    JTextField nameField = new JTextField(customer != null ? customer.getCustomerName() : "", 20);
    JTextField plateField = new JTextField(customer != null ? customer.getVehiclePlateNumber() : "", 10);

    JComboBox<String> service1Combo = new JComboBox<>(new String[]{"None", "Oil Change", "Battery Replacement", "Tire Rotation"});
    JComboBox<String> service2Combo = new JComboBox<>(new String[]{"None", "Oil Change", "Battery Replacement", "Tire Rotation"});
    JComboBox<String> service3Combo = new JComboBox<>(new String[]{"None", "Oil Change", "Battery Replacement", "Tire Rotation"});

    JTextField costField = new JTextField(customer != null ? String.format("%.2f", customer.getServices().stream().mapToDouble(CustomerInfo.ServiceInfo::getServiceCost).sum()) : "", 10);

    // Pre-fill service combo boxes if editing an existing customer
    if (customer != null) 
    {
        LinkedList<CustomerInfo.ServiceInfo> services = customer.getServices();
        if (services.size() > 0) service1Combo.setSelectedItem(services.get(0).getServiceType());
        if (services.size() > 1) service2Combo.setSelectedItem(services.get(1).getServiceType());
        if (services.size() > 2) service3Combo.setSelectedItem(services.get(2).getServiceType());
    }

    // Layout with GridBagLayout for proper alignment
    JPanel panel = new JPanel(new GridBagLayout());
    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5);  // Padding
    gbc.fill = GridBagConstraints.HORIZONTAL;

    // Row 1
    gbc.gridx = 0; gbc.gridy = 0;
    panel.add(new JLabel("Customer ID:"), gbc);
    gbc.gridx = 1; gbc.gridy = 0;
    panel.add(idField, gbc);

    // Row 2
    gbc.gridx = 0; gbc.gridy = 1;
    panel.add(new JLabel("Customer Name:"), gbc);
    gbc.gridx = 1; gbc.gridy = 1;
    panel.add(nameField, gbc);

    // Row 3
    gbc.gridx = 0; gbc.gridy = 2;
    panel.add(new JLabel("Vehicle Plate:"), gbc);
    gbc.gridx = 1; gbc.gridy = 2;
    panel.add(plateField, gbc);

    // Row 4
    gbc.gridx = 0; gbc.gridy = 3;
    panel.add(new JLabel("Service 1:"), gbc);
    gbc.gridx = 1; gbc.gridy = 3;
    panel.add(service1Combo, gbc);

    // Row 5
    gbc.gridx = 0; gbc.gridy = 4;
    panel.add(new JLabel("Service 2:"), gbc);
    gbc.gridx = 1; gbc.gridy = 4;
    panel.add(service2Combo, gbc);

    // Row 6
    gbc.gridx = 0; gbc.gridy = 5;
    panel.add(new JLabel("Service 3:"), gbc);
    gbc.gridx = 1; gbc.gridy = 5;
    panel.add(service3Combo, gbc);

    // Row 7
    gbc.gridx = 0; gbc.gridy = 6;
    panel.add(new JLabel("Service Cost (Total):"), gbc);
    gbc.gridx = 1; gbc.gridy = 6;
    panel.add(costField, gbc);

    int result = JOptionPane.showConfirmDialog(this, panel, customer == null ? "Add New Customer" : "Edit Customer",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

    if (result == JOptionPane.OK_OPTION) 
    {
        String id = idField.getText().trim();
        String name = nameField.getText().trim();
        String plate = plateField.getText().trim();
        double cost;

        try 
        {
            cost = Double.parseDouble(costField.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid cost. Please enter a valid number.");
            return;
        }

        // Collect selected services
        LinkedList<String> services = new LinkedList<>();
        if (!"None".equals(service1Combo.getSelectedItem())) services.add((String) service1Combo.getSelectedItem());
        if (!"None".equals(service2Combo.getSelectedItem())) services.add((String) service2Combo.getSelectedItem());
        if (!"None".equals(service3Combo.getSelectedItem())) services.add((String) service3Combo.getSelectedItem());

        if (services.isEmpty()) 
        {
            JOptionPane.showMessageDialog(this, "Please select at least one service.");
            return;
        }

        if (customer == null) 
        {
            // Add new customer
            CustomerInfo newCustomer = new CustomerInfo(id, name, plate);
            for (String service : services) 
            {
                newCustomer.addService(new CustomerInfo.ServiceInfo("DefaultServiceId", service, cost / services.size(), null, null));
            }
            center.addCustomer(newCustomer);

            tableModel.addRow(new Object[]{id, name, plate, String.join(", ", services), String.format("RM %.2f", cost)});

            // Show success message after adding a new customer
            JOptionPane.showMessageDialog(this, "Customer added successfully!");
        } else {
            // Update existing customer
            customer.getServices().clear();
            for (String service : services) 
            {
                customer.addService(new CustomerInfo.ServiceInfo("DefaultServiceId", service, cost / services.size(), null, null));
            }
            tableModel.setValueAt(id, rowIndex, 0);
            tableModel.setValueAt(name, rowIndex, 1);
            tableModel.setValueAt(plate, rowIndex, 2);
            tableModel.setValueAt(String.join(", ", services), rowIndex, 3);
            tableModel.setValueAt(String.format("RM %.2f", cost), rowIndex, 4);
        }

        distributeCustomersToLanes();
    }
}


    private void deleteCustomer(int row) 
    {
        if (row < 0) 
        {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }
        String customerId = (String) tableModel.getValueAt(row, 0);
        tableModel.removeRow(row);
        center.removeCustomerById(customerId);
        distributeCustomersToLanes();
    }

    private void processPayment(int row) 
    {
        if (row < 0) 
        {
            JOptionPane.showMessageDialog(this, "Please select a customer to process payment.");
            return;
        }

        String customerId = (String) tableModel.getValueAt(row, 0);
        CustomerInfo customer = center.getCustomerById(customerId);

        if (customer != null) 
        {
            tableModel.removeRow(row);
            center.removeCustomerById(customerId);

            new TransactionPage(customer, center, () -> 
            {
                JOptionPane.showMessageDialog(this, "Payment processed successfully for Customer ID: " + customerId);
                distributeCustomersToLanes();
            });
        }
    }
}
